/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,i=Symbol(),e=new Map;class s{constructor(t,e){if(this._$cssResult$=!0,e!==i)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){let i=e.get(this.cssText);return t&&void 0===i&&(e.set(this.cssText,i=new CSSStyleSheet),i.replaceSync(this.cssText)),i}toString(){return this.cssText}}const n=t?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new s("string"==typeof t?t:t+"",i))(e)})(t):t
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;var o,r;const l={toAttribute(t,i){switch(i){case Boolean:t=t?"":null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,i){let e=t;switch(i){case Boolean:e=null!==t;break;case Number:e=null===t?null:Number(t);break;case Object:case Array:try{e=JSON.parse(t)}catch(t){e=null}}return e}},h=(t,i)=>i!==t&&(i==i||t==t),u={attribute:!0,type:String,converter:l,reflect:!1,hasChanged:h};class c extends HTMLElement{constructor(){super(),this._$Et=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Ei=null,this.o()}static addInitializer(t){var i;null!==(i=this.l)&&void 0!==i||(this.l=[]),this.l.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((i,e)=>{const s=this._$Eh(e,i);void 0!==s&&(this._$Eu.set(s,e),t.push(s))})),t}static createProperty(t,i=u){if(i.state&&(i.attribute=!1),this.finalize(),this.elementProperties.set(t,i),!i.noAccessor&&!this.prototype.hasOwnProperty(t)){const e="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,e,i);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,i,e){return{get(){return this[i]},set(s){const n=this[t];this[i]=s,this.requestUpdate(t,n,e)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||u}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Eu=new Map,this.hasOwnProperty("properties")){const t=this.properties,i=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const e of i)this.createProperty(e,t[e])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const i=[];if(Array.isArray(t)){const e=new Set(t.flat(1/0).reverse());for(const t of e)i.unshift(n(t))}else void 0!==t&&i.push(n(t));return i}static _$Eh(t,i){const e=i.attribute;return!1===e?void 0:"string"==typeof e?e:"string"==typeof t?t.toLowerCase():void 0}o(){var t;this._$Ev=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Ep(),this.requestUpdate(),null===(t=this.constructor.l)||void 0===t||t.forEach((t=>t(this)))}addController(t){var i,e;(null!==(i=this._$Em)&&void 0!==i?i:this._$Em=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(e=t.hostConnected)||void 0===e||e.call(t))}removeController(t){var i;null===(i=this._$Em)||void 0===i||i.splice(this._$Em.indexOf(t)>>>0,1)}_$Ep(){this.constructor.elementProperties.forEach(((t,i)=>{this.hasOwnProperty(i)&&(this._$Et.set(i,this[i]),delete this[i])}))}createRenderRoot(){var i;const e=null!==(i=this.shadowRoot)&&void 0!==i?i:this.attachShadow(this.constructor.shadowRootOptions);return((i,e)=>{t?i.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((t=>{const e=document.createElement("style"),s=window.litNonce;void 0!==s&&e.setAttribute("nonce",s),e.textContent=t.cssText,i.appendChild(e)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$Em)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostConnected)||void 0===i?void 0:i.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$Em)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostDisconnected)||void 0===i?void 0:i.call(t)}))}attributeChangedCallback(t,i,e){this._$AK(t,e)}_$Eg(t,i,e=u){var s,n;const o=this.constructor._$Eh(t,e);if(void 0!==o&&!0===e.reflect){const r=(null!==(n=null===(s=e.converter)||void 0===s?void 0:s.toAttribute)&&void 0!==n?n:l.toAttribute)(i,e.type);this._$Ei=t,null==r?this.removeAttribute(o):this.setAttribute(o,r),this._$Ei=null}}_$AK(t,i){var e,s,n;const o=this.constructor,r=o._$Eu.get(t);if(void 0!==r&&this._$Ei!==r){const t=o.getPropertyOptions(r),h=t.converter,u=null!==(n=null!==(s=null===(e=h)||void 0===e?void 0:e.fromAttribute)&&void 0!==s?s:"function"==typeof h?h:null)&&void 0!==n?n:l.fromAttribute;this._$Ei=r,this[r]=u(i,t.type),this._$Ei=null}}requestUpdate(t,i,e){let s=!0;void 0!==t&&(((e=e||this.constructor.getPropertyOptions(t)).hasChanged||h)(this[t],i)?(this._$AL.has(t)||this._$AL.set(t,i),!0===e.reflect&&this._$Ei!==t&&(void 0===this._$ES&&(this._$ES=new Map),this._$ES.set(t,e))):s=!1),!this.isUpdatePending&&s&&(this._$Ev=this._$EC())}async _$EC(){this.isUpdatePending=!0;try{await this._$Ev}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Et&&(this._$Et.forEach(((t,i)=>this[i]=t)),this._$Et=void 0);let i=!1;const e=this._$AL;try{i=this.shouldUpdate(e),i?(this.willUpdate(e),null===(t=this._$Em)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostUpdate)||void 0===i?void 0:i.call(t)})),this.update(e)):this._$ET()}catch(t){throw i=!1,this._$ET(),t}i&&this._$AE(e)}willUpdate(t){}_$AE(t){var i;null===(i=this._$Em)||void 0===i||i.forEach((t=>{var i;return null===(i=t.hostUpdated)||void 0===i?void 0:i.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$ET(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$Ev}shouldUpdate(t){return!0}update(t){void 0!==this._$ES&&(this._$ES.forEach(((t,i)=>this._$Eg(i,this[i],t))),this._$ES=void 0),this._$ET()}updated(t){}firstUpdated(t){}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var d,a;c.finalized=!0,c.elementProperties=new Map,c.elementStyles=[],c.shadowRootOptions={mode:"open"},null===(o=globalThis.reactiveElementPolyfillSupport)||void 0===o||o.call(globalThis,{ReactiveElement:c}),(null!==(r=globalThis.reactiveElementVersions)&&void 0!==r?r:globalThis.reactiveElementVersions=[]).push("1.0.0");const v=globalThis.trustedTypes,f=v?v.createPolicy("lit-html",{createHTML:t=>t}):void 0,p=`lit$${(Math.random()+"").slice(9)}$`,b="?"+p,g=`<${b}>`,y=document,m=(t="")=>y.createComment(t),w=t=>null===t||"object"!=typeof t&&"function"!=typeof t,$=Array.isArray,S=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,_=/-->/g,j=/>/g,O=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,A=/'/g,E=/"/g,C=/^(?:script|style|textarea)$/i,T=(t=>(i,...e)=>({_$litType$:t,strings:i,values:e}))(1),x=Symbol.for("lit-noChange"),k=Symbol.for("lit-nothing"),U=new WeakMap,M=y.createTreeWalker(y,129,null,!1),R=(t,i)=>{const e=t.length-1,s=[];let n,o=2===i?"<svg>":"",r=S;for(let i=0;i<e;i++){const e=t[i];let l,h,u=-1,c=0;for(;c<e.length&&(r.lastIndex=c,h=r.exec(e),null!==h);)c=r.lastIndex,r===S?"!--"===h[1]?r=_:void 0!==h[1]?r=j:void 0!==h[2]?(C.test(h[2])&&(n=RegExp("</"+h[2],"g")),r=O):void 0!==h[3]&&(r=O):r===O?">"===h[0]?(r=null!=n?n:S,u=-1):void 0===h[1]?u=-2:(u=r.lastIndex-h[2].length,l=h[1],r=void 0===h[3]?O:'"'===h[3]?E:A):r===E||r===A?r=O:r===_||r===j?r=S:(r=O,n=void 0);const d=r===O&&t[i+1].startsWith("/>")?" ":"";o+=r===S?e+g:u>=0?(s.push(l),e.slice(0,u)+"$lit$"+e.slice(u)+p+d):e+p+(-2===u?(s.push(void 0),i):d)}const l=o+(t[e]||"<?>")+(2===i?"</svg>":"");return[void 0!==f?f.createHTML(l):l,s]};class N{constructor({strings:t,_$litType$:i},e){let s;this.parts=[];let n=0,o=0;const r=t.length-1,l=this.parts,[h,u]=R(t,i);if(this.el=N.createElement(h,e),M.currentNode=this.el.content,2===i){const t=this.el.content,i=t.firstChild;i.remove(),t.append(...i.childNodes)}for(;null!==(s=M.nextNode())&&l.length<r;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const i of s.getAttributeNames())if(i.endsWith("$lit$")||i.startsWith(p)){const e=u[o++];if(t.push(i),void 0!==e){const t=s.getAttribute(e.toLowerCase()+"$lit$").split(p),i=/([.?@])?(.*)/.exec(e);l.push({type:1,index:n,name:i[2],strings:t,ctor:"."===i[1]?L:"?"===i[1]?B:"@"===i[1]?D:q})}else l.push({type:6,index:n})}for(const i of t)s.removeAttribute(i)}if(C.test(s.tagName)){const t=s.textContent.split(p),i=t.length-1;if(i>0){s.textContent=v?v.emptyScript:"";for(let e=0;e<i;e++)s.append(t[e],m()),M.nextNode(),l.push({type:2,index:++n});s.append(t[i],m())}}}else if(8===s.nodeType)if(s.data===b)l.push({type:2,index:n});else{let t=-1;for(;-1!==(t=s.data.indexOf(p,t+1));)l.push({type:7,index:n}),t+=p.length-1}n++}}static createElement(t,i){const e=y.createElement("template");return e.innerHTML=t,e}}function z(t,i,e=t,s){var n,o,r,l;if(i===x)return i;let h=void 0!==s?null===(n=e._$Cl)||void 0===n?void 0:n[s]:e._$Cu;const u=w(i)?void 0:i._$litDirective$;return(null==h?void 0:h.constructor)!==u&&(null===(o=null==h?void 0:h._$AO)||void 0===o||o.call(h,!1),void 0===u?h=void 0:(h=new u(t),h._$AT(t,e,s)),void 0!==s?(null!==(r=(l=e)._$Cl)&&void 0!==r?r:l._$Cl=[])[s]=h:e._$Cu=h),void 0!==h&&(i=z(t,h._$AS(t,i.values),h,s)),i}class I{constructor(t,i){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var i;const{el:{content:e},parts:s}=this._$AD,n=(null!==(i=null==t?void 0:t.creationScope)&&void 0!==i?i:y).importNode(e,!0);M.currentNode=n;let o=M.nextNode(),r=0,l=0,h=s[0];for(;void 0!==h;){if(r===h.index){let i;2===h.type?i=new P(o,o.nextSibling,this,t):1===h.type?i=new h.ctor(o,h.name,h.strings,this,t):6===h.type&&(i=new Z(o,this,t)),this.v.push(i),h=s[++l]}r!==(null==h?void 0:h.index)&&(o=M.nextNode(),r++)}return n}m(t){let i=0;for(const e of this.v)void 0!==e&&(void 0!==e.strings?(e._$AI(t,e,i),i+=e.strings.length-2):e._$AI(t[i])),i++}}class P{constructor(t,i,e,s){var n;this.type=2,this._$AH=k,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=e,this.options=s,this._$Cg=null===(n=null==s?void 0:s.isConnected)||void 0===n||n}get _$AU(){var t,i;return null!==(i=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==i?i:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=z(this,t,i),w(t)?t===k||null==t||""===t?(this._$AH!==k&&this._$AR(),this._$AH=k):t!==this._$AH&&t!==x&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.S(t):(t=>{var i;return $(t)||"function"==typeof(null===(i=t)||void 0===i?void 0:i[Symbol.iterator])})(t)?this.M(t):this.$(t)}A(t,i=this._$AB){return this._$AA.parentNode.insertBefore(t,i)}S(t){this._$AH!==t&&(this._$AR(),this._$AH=this.A(t))}$(t){this._$AH!==k&&w(this._$AH)?this._$AA.nextSibling.data=t:this.S(y.createTextNode(t)),this._$AH=t}T(t){var i;const{values:e,_$litType$:s}=t,n="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N.createElement(s.h,this.options)),s);if((null===(i=this._$AH)||void 0===i?void 0:i._$AD)===n)this._$AH.m(e);else{const t=new I(n,this),i=t.p(this.options);t.m(e),this.S(i),this._$AH=t}}_$AC(t){let i=U.get(t.strings);return void 0===i&&U.set(t.strings,i=new N(t)),i}M(t){$(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let e,s=0;for(const n of t)s===i.length?i.push(e=new P(this.A(m()),this.A(m()),this,this.options)):e=i[s],e._$AI(n),s++;s<i.length&&(this._$AR(e&&e._$AB.nextSibling,s),i.length=s)}_$AR(t=this._$AA.nextSibling,i){var e;for(null===(e=this._$AP)||void 0===e||e.call(this,!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){var i;void 0===this._$AM&&(this._$Cg=t,null===(i=this._$AP)||void 0===i||i.call(this,t))}}class q{constructor(t,i,e,s,n){this.type=1,this._$AH=k,this._$AN=void 0,this.element=t,this.name=i,this._$AM=s,this.options=n,e.length>2||""!==e[0]||""!==e[1]?(this._$AH=Array(e.length-1).fill(new String),this.strings=e):this._$AH=k}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,i=this,e,s){const n=this.strings;let o=!1;if(void 0===n)t=z(this,t,i,0),o=!w(t)||t!==this._$AH&&t!==x,o&&(this._$AH=t);else{const s=t;let r,l;for(t=n[0],r=0;r<n.length-1;r++)l=z(this,s[e+r],i,r),l===x&&(l=this._$AH[r]),o||(o=!w(l)||l!==this._$AH[r]),l===k?t=k:t!==k&&(t+=(null!=l?l:"")+n[r+1]),this._$AH[r]=l}o&&!s&&this.k(t)}k(t){t===k?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class L extends q{constructor(){super(...arguments),this.type=3}k(t){this.element[this.name]=t===k?void 0:t}}class B extends q{constructor(){super(...arguments),this.type=4}k(t){t&&t!==k?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name)}}class D extends q{constructor(t,i,e,s,n){super(t,i,e,s,n),this.type=5}_$AI(t,i=this){var e;if((t=null!==(e=z(this,t,i,0))&&void 0!==e?e:k)===x)return;const s=this._$AH,n=t===k&&s!==k||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,o=t!==k&&(s===k||n);n&&this.element.removeEventListener(this.name,this,s),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var i,e;"function"==typeof this._$AH?this._$AH.call(null!==(e=null===(i=this.options)||void 0===i?void 0:i.host)&&void 0!==e?e:this.element,t):this._$AH.handleEvent(t)}}class Z{constructor(t,i,e){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=e}get _$AU(){return this._$AM._$AU}_$AI(t){z(this,t)}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var H,J,F;null===(d=globalThis.litHtmlPolyfillSupport)||void 0===d||d.call(globalThis,N,P),(null!==(a=globalThis.litHtmlVersions)&&void 0!==a?a:globalThis.litHtmlVersions=[]).push("2.0.0");class K extends c{constructor(){super(...arguments),this.renderOptions={host:this},this._$Dt=void 0}createRenderRoot(){var t,i;const e=super.createRenderRoot();return null!==(t=(i=this.renderOptions).renderBefore)&&void 0!==t||(i.renderBefore=e.firstChild),e}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Dt=((t,i,e)=>{var s,n;const o=null!==(s=null==e?void 0:e.renderBefore)&&void 0!==s?s:i;let r=o._$litPart$;if(void 0===r){const t=null!==(n=null==e?void 0:e.renderBefore)&&void 0!==n?n:null;o._$litPart$=r=new P(i.insertBefore(m(),t),t,void 0,null!=e?e:{})}return r._$AI(t),r})(i,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!1)}render(){return x}}function V(t,[i,e]){return i.toLowerCase()!==i?t[i]=Object.assign(Object.assign({},e),{attribute:i.replace(/[A-Z]/g,"-$&").toLowerCase()}):t[i]=e,t}function W(t){return"boolean"==typeof t?{type:Boolean}:Array.isArray(t)?{type:Array}:"object"==typeof t?{type:Object}:{}}K.finalized=!0,K._$litElement$=!0,null===(H=globalThis.litElementHydrateSupport)||void 0===H||H.call(globalThis,{LitElement:K}),null===(J=globalThis.litElementPolyfillSupport)||void 0===J||J.call(globalThis,{LitElement:K}),(null!==(F=globalThis.litElementVersions)&&void 0!==F?F:globalThis.litElementVersions=[]).push("3.0.0");const G=t=>(t=>void 0!==t&&void 0!==t.props)(t)?(t.props||[]).reduce(((t,i)=>(Object.entries(i).forEach((i=>t=V(t,i))),t)),{}):(t=>{return i=t||{},Object.entries(i).reduce(((t,[i,e])=>V(t,[i,W(e)])),{});var i})(null==t?void 0:t.defaults),Q={},X=(t,i,e)=>{if(Q[t])return Q[t];customElements.define(t,class extends K{static get properties(){return G(e)}static get styles(){return null==e?void 0:e.styles}constructor(){super(),(t=>void 0!==t&&void 0!==t.defaults)(e)&&Object.entries(e.defaults).forEach((([t,i])=>{this[t]=i}))}render(){return i(this)}});const s=document.createElement(t);return Q[t]=s,s};var Y="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},tt={},it={},et={};Object.defineProperty(et,"t",{value:!0}),et.shallowClone=void 0,et.shallowClone=function(t){return"object"!=typeof t||!t||t instanceof Date||t instanceof RegExp?t:Array.isArray(t)?[...t]:Object.assign({},t)};var st={};function nt(t){if(!t.dispatchEvent||!t.requestUpdate)throw new Error("Element missing required functions (dispatchEvent/requestUpdate)");return t}Object.defineProperty(st,"t",{value:!0}),st.withReducer=st.withState=st.decorate=st.asUpdateableLitElement=void 0,st.asUpdateableLitElement=nt;const ot="__registered_states";function rt(t){const i=t;if(i[ot])return i;const e=nt(t),s=e.updated;return i[ot]={index:0,count:0,states:[],reducers:[]},e.updated=t=>(i[ot].index=0,s(t)),i}st.decorate=rt,st.withState=function(t,i,e={}){const s=rt(t),{index:n,count:o}=s[ot];return n===o?(s[ot].index++,s[ot].count++,s[ot].states.push(i),i):(s[ot].index++,e.updateDefault&&s[ot].states[n].inject(i.get()),s[ot].states[n])},st.withReducer=function(t,i){const e=rt(t),{index:s,count:n,reducers:o}=e[ot];return s!==n||o[s-1]?e[ot].reducers[s-1]:(e[ot].reducers[s-1]=i,i)};var lt=Y&&Y.o||function(t,i,e,s){return new(e||(e=Promise))((function(n,o){function r(t){try{h(s.next(t))}catch(t){o(t)}}function l(t){try{h(s.throw(t))}catch(t){o(t)}}function h(t){var i;t.done?n(t.value):(i=t.value,i instanceof e?i:new e((function(t){t(i)}))).then(r,l)}h((s=s.apply(t,i||[])).next())}))};Object.defineProperty(it,"t",{value:!0}),it.useState=void 0;const ht=et,ut=st;it.useState=(t,i,e={})=>{let s=(0,ht.shallowClone)(i);const n=[()=>t.requestUpdate()],o=t=>lt(void 0,void 0,void 0,(function*(){s!==t&&(s=(0,ht.shallowClone)(t),n.forEach((t=>t(s))))}));return(0,ut.withState)(t,new class{set value(t){o(t)}get value(){return s}publish(t){o(t)}set(t){return lt(this,void 0,void 0,(function*(){yield o(t)}))}subscribe(t){n.push(t)}inject(t){s=t}get(){return s}getState(){return s}},e)};var ct={};Object.defineProperty(ct,"t",{value:!0}),ct.useReducer=void 0;const dt=it,at=st;ct.useReducer=(t,i,e,s={})=>{const{get:n,set:o}=(0,dt.useState)(t,e,s),r=[],l=(e,l)=>{const h=i(n());h[e]&&(o(h[e](l)),r.forEach((t=>t(e,n()))),s.dispatchEvent&&t.dispatchEvent(new CustomEvent(e,{detail:n()})))};return(0,at.withReducer)(t,{getState:n,publish:l,get:n,subscribe:t=>r.push(t),when:(t,i)=>r.push(((e,s)=>e===t&&i(s))),set:l})},function(t){Object.defineProperty(t,"t",{value:!0}),t.useReducer=t.useState=void 0;var i=it;Object.defineProperty(t,"useState",{enumerable:!0,get:function(){return i.useState}});var e=ct;Object.defineProperty(t,"useReducer",{enumerable:!0,get:function(){return e.useReducer}})}(tt);var vt={},ft={},pt={};function bt(t){if(!t.dispatchEvent||!t.requestUpdate)throw new Error("Element missing required functions (dispatchEvent/requestUpdate)");return t}Object.defineProperty(pt,"t",{value:!0}),pt.withEffect=pt.decorate=pt.asUpdateableLitElement=void 0,pt.asUpdateableLitElement=bt;const gt="__registered_effects";function yt(t){const i=t;if(i[gt])return i;const e=bt(t),s=e.updated;return i[gt]={index:0,count:0,effects:[]},e.updated=t=>(i[gt].index=0,s(t)),i}pt.decorate=yt,pt.withEffect=function(t,i){const e=yt(t),{index:s,count:n}=e[gt];return s===n?(e[gt].index++,e[gt].count++,e[gt].effects.push(i),i):(e[gt].index++,e[gt].effects[s])},Object.defineProperty(ft,"t",{value:!0}),ft.useOnce=ft.useEffect=void 0;const mt=pt;function wt(t,i,e){const s=(0,mt.withEffect)(t,{on:i,observe:["__initial__dirty"]});s.observe.some(((t,i)=>e[i]!==t))&&s.on(),s.observe=e}ft.useEffect=wt,ft.useOnce=(t,i)=>wt(t,i,[]),function(t){Object.defineProperty(t,"t",{value:!0}),t.useOnce=t.useEffect=void 0;var i=ft;Object.defineProperty(t,"useEffect",{enumerable:!0,get:function(){return i.useEffect}}),Object.defineProperty(t,"useOnce",{enumerable:!0,get:function(){return i.useOnce}})}(vt);var $t=tt.useReducer,St=tt.useState;const _t=t=>({update:t=>t,add:()=>t});X("todo-list",(t=>T`<ul>
    ${t.items.map((i=>T`<li @click=${()=>t.dispatchEvent(new CustomEvent("remove",{detail:i}))}>${i}</li>`))}
  </ul>`),{styles:[((t,...e)=>{const n=1===t.length?t[0]:e.reduce(((i,e,s)=>i+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(e)+t[s+1]),t[0]);return new s(n,i)})`
        ul {
          padding: 0;
          margin: 1rem 0;
          list-style: none;
          overflow: hidden;
        }
        li {
          background-color:inherit;
          padding: .5em;
          border-bottom: solid 1px var(--colorFocus);
          color: var(--colorContrast);
          font-style: italic;
          cursor: pointer;
          transition: all 500ms;
        }
        li:hover {
          background-color:var(--colorShow);
        }
      `],defaults:{items:[]}}),X("todo-add",(t=>{const{publish:i,getState:e}=$t(t,_t,"",{dispatchEvent:!0}),s=()=>e().length>0&&(i("add"),i("update",""));return T`
    <input
      type="text"
      name="item"
      .value="${e()}"
      @input="${t=>(({value:t})=>i("update",t))(t.target)}"
      @keypress="${t=>"Enter"===t.key&&s()}"
      placeholder="insert new item"
    />
    <button @click=${()=>s()}>
      Add Item
    </button>
  `})),X("todo-app",(t=>{const{getState:i,publish:e}=St(t,[]);return T`
    <div>
      <todo-add @add=${t=>e([...i(),t.detail])}></todo-add>
    </div>
    <div>
      <todo-list
        .items=${i()}
        @remove=${t=>e([...i().filter((i=>i!==t.detail))])}
      ></todo-list>
    </div>
  `}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
